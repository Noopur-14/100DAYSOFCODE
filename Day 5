 Peak Index in a Mountain Array
 Let's call an array arr a mountain if the following properties hold:
 
 arr.length >= 3
 There exists some i with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... arr[i-1] < arr[i]
arr[i] > arr[i+1] > ... > arr[arr.length - 1]

Given an integer array arr that is guaranteed to be a mountain, return any i such that arr[0] < arr[1] < ... arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
Input: arr = [0,1,0]
Output: 1

Solution:

class Solution {
    public int peakIndexInMountainArray(int[] arr) {
        int start=0;
        int end=arr.length-1;
        while(start<end)
        {
            int mid=start+(end-start)/2;
            if(arr[mid]>arr[mid+1])
            {
                //You are in dec part of array
                //This might be the answer but still we have to check lhs
                end=mid;
            }
            else{
                start=mid+1;//Coz mid+1 is greater than mid 
            }
        }
        return start;
        
    }
}
