Find First and Last Position of Element in Sorted Array
Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

SOLUTION:
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] ans={-1,-1};
        int start=search(nums,target,true );
        int end=search(nums,target,false );
        ans[0]=start;
        ans[1]=end;
        
        
        return ans;
       }
    
          
     
    int search(int[] nums,int target,boolean findstartind)
    {
        int ans=-1;
         int start=0;
        int end=nums.length-1;
        while(start<=end)
        {
            int mid=start+(end-start)/2;
            if(target<nums[mid])
            {
                end=mid-1;
            }
            else if(target>nums[mid])
                    {
                        start=mid+1;
                    }
                    else 
                    {
                        ans=mid;
                        if(findstartind)
                        {
                            end=mid-1;
                        }
                        else
                        {
                            start=mid+1;
                        }
                   }
          }
        return ans;
        
        }
       
    }
